# Step 1 - Create the backend canister

In this step we will create a backend for our application that will be implemented as Internet Computer canister.

Backend canisters have a default user interface called Candid UI that will allow you to interact with them without writing any frontend code. Here's how Candid UI for our project will look like at the end of this step:
![Candid UI screenshot (final)](__attachments/Screenshot%202022-12-08%20at%2011.13.55@2x.png)

## Creating a project

To create a project, open your terminal app and type:
```shell
$ dfx new poll
```

SDK will create an empty project in a folder "poll":
![dfx new poll terminal image](__attachments/dfx%20new.png)

## Understanding the project structure

After your app is created you can examine the folder structure:

```
poll                   <-- App main folder
├── README.md
├── dfx.json           <-- configuration of your Internet Computer app
├── package-lock.json  <-- node.js packages config
├── package.json       <-- node.js packages config
├── src
│   ├── poll_backend   <-- source code of your backend app
│   │   └── main.mo    <-- WE WILL BE WORKING IN THIS FILE!
│   └── poll_frontend  <-- source code of your frontend app
│       └── ...
└── webpack.config.js  <-- web app bundler config
```

In this tutorial will be only working in one file `main.mo` that contains the code of our backend app in programming language Motoko.


## Adding the poll's main qquestion


## Adding update functions


## Testing using Candid UI

## Addign query methods

## Testing full backend implementation with Candid UI




